import { ListView, Button, LineEdit, TabWidget, GroupBox, VerticalBox, HorizontalBox, ScrollView, ComboBox } from "sixtyfps_widgets.60";


import { SortView, Filters, SortItem, ListItem } from "sort.60";
import { EventsView } from "events.60";
import { SieveView, SieveComboValues } from "sieve.60";
import { SettingsView } from "settings.60";
import { HelpView } from "help.60";

export { SieveComboValues, Filters, SortItem, ListItem }

ImageSieve := Window {
    min-width: 1600px;
    min-height: 800px;
    title: "ImageSieve";
    icon: @image-url("ImageSieve.png");

    property <string> window-title <=> root.title;
    property <bool> loading: true;    
    property <string> loading-progress <=> loading-progress.text;
    callback cancel-loading;
    // Callback required to signal that the synchronization process has finished
    callback synchronization-finished;
    // Callback required to signal that the item list shall be updated
    callback similarities-calculated(bool);

    // Map properties of SortView
    property list-model <=> sort-view.list-model;
    property current-list-item <=> sort-view.current-list-item;
    property similar-images-model <=> sort-view.similar-images-model;
    property current-image <=> sort-view.current-image;
    property source-directory <=> sort-view.source-directory;
    property calculating-similarities <=> sort-view.calculating-similarities;
    property filters <=> sort-view.filters;
    callback item-selected <=> sort-view.item-selected;
    callback browse-source <=> sort-view.browse-source;
    callback set-take-over <=> sort-view.set-take-over;
    callback open <=> sort-view.open;
    callback filter <=> sort-view.filter;

    // Map properties of EventsView
    property events-model <=> events-view.events-model;
    callback add-event <=> events-view.add-event;
    callback update-event <=> events-view.update-event;
    callback remove-event <=> events-view.remove-event;

    // Map properties of SieveView
    property sieve-result-model <=> sieve-view.sieve-result-model;
    property target-directory <=> sieve-view.target-directory;
    property sieve-method <=> sieve-view.sieve-method;
    property sieve-directory-names <=> sieve-view.sieve-directory-names;
    property sieve-running <=> sieve-view.sieve-running;
    callback sieve <=> sieve-view.sieve;
    callback browse-target <=> sieve-view.browse-target;

    // Map properties of SettingsView
    property use-timestamps <=> settings-view.use-timestamps;
    property timestamp-difference <=> settings-view.timestamp-difference;
    property use-similarity <=> settings-view.use-similarity;
    property similarity-sensitivity <=> settings-view.similarity-sensitivity;
    callback recheck-similarities <=> settings-view.recheck-similarities;
    callback open-url <=> settings-view.open-url;

    forward-focus: key-handler;
    key-handler:= FocusScope {  
        key-pressed(event) => {
            if (tabs.current-index == 0) {
                if (event.text == Keys.LeftArrow) {
                    if (current-list-item > 0) {
                        sort-view.prev-clicked();
                    }
                }
                if (event.text == Keys.RightArrow) {
                    if (list-model.length > 0 && current-list-item < list-model.length - 1) {
                        sort-view.next-clicked();
                    }
                }
                // TODO: On up and down key, change current-image-index
                // First waiting for https://github.com/sixtyfpsui/sixtyfps/issues/170 because we currently cannot get the up or down key...
                // Then waiting for https://github.com/sixtyfpsui/sixtyfps/issues/98 to be implemented, otherwise it will get too complicated
                // On key up, the next image-index shall be selected, on key down the previous one
                if (event.text == " ") {
                    sort-view.selected-clicked()
                }
                accept
            }
            else {
                reject
            }
        }
                
        tabs := TabWidget { 
            visible: !loading;
            Tab {
                title: "📷 📹  Images";
                
                sort-view := SortView {
                }
            }

            Tab {
                title: "📅  Events";

                events-view := EventsView {
                }
            }

            Tab {
                title: "💾  Sieve";
                
                sieve-view := SieveView {
                }
            }

            Tab {
                title: "⚙  Settings";
                
                settings-view := SettingsView {                
                }
            }

            Tab {
                title: "❓  Help";
                help-view := HelpView {
                }
            }
        }

    }
    VerticalLayout { 
        alignment: center;
        spacing: 10px;

        HorizontalLayout { 
            alignment: center;
            Text {
                text: "⌛ Please wait, searching for images...";
                visible: loading;
                font-size: 20px;
            }
        }
        HorizontalLayout { 
            alignment: center;
            loading-progress := Text {
                visible: loading;
            }
        }
        HorizontalLayout { 
            alignment: center;
            Button {
                text: "❌ Cancel";
                visible: loading;
                width: 200px;
                clicked => {
                    cancel-loading();
                }
            }
        }
    }
}

